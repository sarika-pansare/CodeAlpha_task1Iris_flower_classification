

🌸 Iris Flower Classification – CodeAlpha Internship Project


📖 About the Project

This project focuses on solving a classic problem in machine learning: classifying iris flowers based on measurable attributes. It is developed as part of the CodeAlpha Data Science Internship, which emphasizes hands-on learning and real-world applications of data science.

The objective is to:

Understand the workflow of a supervised learning problem.

Apply data preprocessing and feature engineering techniques.

Train and evaluate multiple machine learning models.

Analyze the most important features influencing predictions.



---

⭐ Key Features

Loaded the Iris dataset using scikit-learn.datasets.

Converted the dataset into a Pandas DataFrame for easy manipulation.

Visualized data relationships using Seaborn’s pairplot to identify patterns.

Used StandardScaler to normalize feature values.

Trained three models: KNN, SVM, and Random Forest.

Displayed results with accuracy score, confusion matrix, and classification report.

Analyzed feature importance from the Random Forest model.


This project follows a modular and clean coding approach, making it easy to read, understand, and extend.


---

🛠 Tech Stack

Programming Language: Python

Libraries Used:

numpy: For numerical operations.

pandas: For data manipulation and analysis.

matplotlib & seaborn: For data visualization.

scikit-learn: For loading dataset, preprocessing, model building, and evaluation.




---

📂 Dataset Overview

Dataset: Iris flower dataset

Source: Built-in dataset from scikit-learn

Size: 150 records with 4 features and 1 label column


Feature	Description

Sepal Length	Length of the sepal in cm
Sepal Width	Width of the sepal in cm
Petal Length	Length of the petal in cm
Petal Width	Width of the petal in cm
Species	Iris species (target label)


This dataset is well-balanced, making it ideal for beginner ML classification projects.


---

📊 Data Analysis and Visualization

Seaborn Pairplot showed clear separation between the species, particularly when plotting petal length and width.

Found overlapping patterns in Sepal features, but distinct patterns in Petal features.

Histograms and scatterplots helped understand feature distributions.

Visualization helped decide that petal features are more useful in classification than sepal features.



---

🤖 Machine Learning Models Used

1. K-Nearest Neighbors (KNN):

Intuitive and non-parametric.

Accuracy: ~95%

Best suited when decision boundaries are non-linear.



2. Support Vector Machine (SVM):

Used with linear kernel.

Finds optimal hyperplane for classification.

Performs well in high-dimensional space.



3. Random Forest Classifier:

Ensemble model using multiple decision trees.

Most accurate in this project.

Feature importance extraction supported.

Accuracy: ~96.6%




✅ All models trained on a 70-30 train-test split and evaluated using:

Accuracy Score

Confusion Matrix

Classification Report (Precision, Recall, F1-Score)



---

🧪 How to Run the Project

1. Clone the repo:

git clone https://github.com/yourusername/CodeAlpha_IrisFlowerClassification.git
cd CodeAlpha_IrisFlowerClassification


2. Install requirements:

pip install numpy pandas matplotlib seaborn scikit-learn


3. Run the Python file:

python iris_classification.py



> Note: You can also use a Jupyter Notebook if available (e.g., Iris_Classification.ipynb).




---

📈 Results and Insights

All three models showed very high accuracy (>95%).

Random Forest was slightly more accurate and interpretable.

Petal Length and Petal Width were most important features for predicting the species.

Misclassifications occurred mostly between Versicolor and Virginica, which have slight feature overlaps.



---

🔮 Future Scope

Integrate a Flask or Streamlit interface to make it user-friendly.

Add model serialization using joblib or pickle for deployment.

Deploy model on Heroku, Render, or Hugging Face Spaces.

Apply hyperparameter tuning using GridSearchCV or RandomizedSearchCV.

Use cross-validation for more reliable model evaluation.

Expand dataset with more flower types or noisy real world data


